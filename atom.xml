<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leon Blog</title>
  
  <subtitle>温柔、人性 better than  冷酷、金钱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-15T09:59:47.630Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leon Blog</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python闭包和作用域</title>
    <link href="http://yoursite.com/2018/10/23/python%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2018/10/23/python中的闭包和作用域/</id>
    <published>2018-10-23T03:27:22.000Z</published>
    <updated>2019-07-15T09:59:47.630Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>Python中的闭包不是一个一说就能明白的概念，但是随着你往学习的深入，无论如何你都需要去了解这么一个东西。<br>闭包的概念我们尝试从概念上去理解一下闭包。在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。闭包可以用来在一个函数与一组“私有”变量之间创建关联关系。在给定函数被多次调用的过程中，这些私有变量能够保持其持久性。<br>用比较容易懂的人话说，就是当某个函数被当成对象返回时，夹带了外部变量，就形成了一个闭包。看例子。<br>def make_printer(msg):<br>    def printer():<br>        print msg  # 夹带私货（外部变量）<br>    return printer  # 返回的是函数，带私货的函数</p><p>printer = make_printer(‘Foo!’)<br>printer()<br>支持将函数当成对象使用的编程语言，一般都支持闭包。比如Python, JavaScript。<br>如何理解闭包<br>闭包存在有什么意义呢？为什么需要闭包？<br>我个人认为，闭包存在的意义就是它夹带了外部变量（私货），如果它不夹带私货，它和普通的函数就没有任何区别。同一个的函数夹带了不同的私货，就实现了不同的功能。其实你也可以这么理解，闭包和面向接口编程的概念很像，可以把闭包理解成轻量级的接口封装。<br>接口定义了一套对方法签名的约束规则。<br>def tag(tag_name):<br>    def add_tag(content):<br>        return “&lt;{0}&gt;{1}&lt;/{0}&gt;”.format(tag_name, content)<br>    return add_tag</p><p>content = ‘Hello’</p><p>add_tag = tag(‘a’)<br>print add_tag(content)</p><h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a><a>Hello</a></h1><p>add_tag = tag(‘b’)<br>print add_tag(content)</p><h1 id="Hello-1"><a href="#Hello-1" class="headerlink" title="Hello"></a><b>Hello</b></h1><p>在这个例子里，我们想要一个给content加tag的功能，但是具体的tag_name是什么样子的要根据实际需求来定，对外部调用的接口已经确定，就是add_tag(content)。如果按照面向接口方式实现，我们会先把add_tag写成接口，指定其参数和返回类型，然后分别去实现a和b的add_tag。<br>但是在闭包的概念中，add_tag就是一个函数，它需要tag_name和content两个参数，只不过tag_name这个参数是打包带走的。所以一开始时就可以告诉我怎么打包，然后带走就行。<br>上面的例子不太生动，其实在我们生活和工作中，闭包的概念也很常见。比如说手机拨号，你只关心电话打给谁，而不会去纠结每个品牌的手机是怎么实现的，用到了哪些模块。再比如去餐馆吃饭，你只要付钱就可以享受到服务，你并不知道那桌饭菜用了多少地沟油。这些都可以看成闭包，返回来的是一些功能或者服务（打电话，用餐），但是这些功能使用了外部变量（天线，地沟油等等）。<br>你也可以把一个类实例看成闭包，当你在构造这个类时，使用了不同的参数，这些参数就是闭包里的包，这个类对外提供的方法就是闭包的功能。但是类远远大于闭包，因为闭包只是一个可以执行的函数，但是类实例则有可能提供很多方法。<br>何时使用闭包<br>其实闭包在Python中很常见，只不过你没特别注意这就是一个闭包。比如Python中的装饰器Decorator，假如你需要写一个带参数的装饰器，那么一般都会生成闭包。<br>为什么？因为Python的装饰器是一个固定的函数接口形式。它要求你的装饰器函数（或装饰器类）必须接受一个函数并返回一个函数：</p><h1 id="how-to-define"><a href="#how-to-define" class="headerlink" title="how to define"></a>how to define</h1><p>def wrapper(func1):  # 接受一个callable对象<br>    return func2  # 返回一个对象，一般为函数</p><h1 id="how-to-use"><a href="#how-to-use" class="headerlink" title="how to use"></a>how to use</h1><p>def target_func(args): # 目标函数<br>    pass</p><h1 id="调用方式一，直接包裹"><a href="#调用方式一，直接包裹" class="headerlink" title="调用方式一，直接包裹"></a>调用方式一，直接包裹</h1><p>result = wrapper(target_func)(args)</p><h1 id="调用方式二，使用-语法，等同于方式一"><a href="#调用方式二，使用-语法，等同于方式一" class="headerlink" title="调用方式二，使用@语法，等同于方式一"></a>调用方式二，使用@语法，等同于方式一</h1><p>@wrapper<br>def target_func(args):<br>    pass</p><p>result = target_func()<br>那么如果你的装饰器如果带参数呢？那么你就需要在原来的装饰器上再包一层，用于接收这些参数。这些参数（私货）传递到内层的装饰器里后，闭包就形成了。所以说当你的装饰器需要自定义参数时，一般都会形成闭包。（类装饰器例外）<br>def html_tags(tag_name):<br>    def wrapper_(func):<br>        def wrapper(<em>args, **kwargs):<br>            content = func(</em>args, **kwargs)<br>            return “&lt;{tag}&gt;{content}&lt;/{tag}&gt;”.format(tag=tag_name, content=content)<br>        return wrapper<br>    return wrapper_</p><p>@html_tags(‘b’)<br>def hello(name=’Toby’):<br>    return ‘Hello {}!’.format(name)</p><h1 id="不用-的写法如下"><a href="#不用-的写法如下" class="headerlink" title="不用@的写法如下"></a>不用@的写法如下</h1><h1 id="hello-html-tag-‘b’-hello"><a href="#hello-html-tag-‘b’-hello" class="headerlink" title="hello = html_tag(‘b’)(hello)"></a>hello = html_tag(‘b’)(hello)</h1><h1 id="html-tag-‘b’-是一个闭包，它接受一个函数，并返回一个函数"><a href="#html-tag-‘b’-是一个闭包，它接受一个函数，并返回一个函数" class="headerlink" title="html_tag(‘b’) 是一个闭包，它接受一个函数，并返回一个函数"></a>html_tag(‘b’) 是一个闭包，它接受一个函数，并返回一个函数</h1><p>print hello()  # <b>Hello Toby!</b><br>print hello(‘world’)  # <b>Hello world!</b><br>关于装饰器的更深入剖析，可以看我写的另外一篇博客。<br>再深入一点<br>其实也不必太深入，理解这上面的概念，很多看起来头疼的代码也不过如此。<br>下面让我们来了解一下闭包的包到底长什么样子。其实闭包函数相对与普通函数会多出一个<strong>closure</strong>的属性，里面定义了一个元组用于存放所有的cell对象，每个cell对象一一保存了这个闭包中所有的外部变量。</p><blockquote><blockquote><blockquote><p>def make_printer(msg1, msg2):<br>    def printer():<br>        print msg1, msg2<br>    return printer<br>printer = make_printer(‘Foo’, ‘Bar’)  # 形成闭包</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>printer.<strong>closure</strong>   # 返回cell元组<br>(<cell at="" 0x03a10930:="" str="" object="" 0x039da218="">, <cell at="" 0x03a10910:="" str="" object="" 0x039da488="">)</cell></cell></p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>printer.<strong>closure</strong>[0].cell_contents  # 第一个外部变量<br>‘Foo’<br>printer.<strong>closure</strong>[1].cell_contents  # 第二个外部变量<br>‘Bar’</p></blockquote></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Python中的闭包不是一个一说就能明白的概念，但是随着你往学习的深入，无论如何你都需要去了解这么一个东西。&lt;br&gt;闭包的概念我们尝试从概念上去理解一下闭包。在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2018/10/19/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/10/19/我的第一篇博客/</id>
    <published>2018-10-19T13:12:41.000Z</published>
    <updated>2018-10-19T13:13:46.414Z</updated>
    
    <content type="html"><![CDATA[<p>2018年10-29日开通github博客，把目前整理的资料和学习路径和想法写在博客里</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018年10-29日开通github博客，把目前整理的资料和学习路径和想法写在博客里&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
